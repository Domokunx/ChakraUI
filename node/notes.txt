4 modules to know about node;

1. operating system (os)
2. file system (fs)
3. http
4. events

//-------------

js Global objects:
console.log()

setTimeout()
clearTimeout()

setInterval()
clearInterval()

In JS, all of these are automatically added to 'window' objects
In node, its replaced with the 'global' object, there is no 'window' object
variables declared are not automatically added to the 'global' scope

i.e: console.log(global.<variable>) returns undefined.

//---------------------------
Raise an event
---------------
server.listen(port, function called when port is being listened)
*Proper way to choose a port is to use the environmental variable instead of hardcoding assigning it.
const port = process.env.PORT 

You can set the env var in the console. 
- on Powershell: $env:PORT=5000
- on Windows: SET PORT=5000
- on MAC: export PORT=5000
- run the script: PORT=5000 node app.js



Routes
--------
1. Getting data for a page
app.get('<url>', (req, res) => {
res.send()
})

2. Adding a new page
app.post('<url>', (req, res) => {
res.send()
})

3. Updating data on an existing page
app.put('<url>', (req, res) => {
res.send()
})

4. Deleting data of an existing page
app.delete('<url>', (req, res) => {
res.send()
})
//---------------------------

node appreciates modularity.
Need to understand how modules work, and how to write code that fit this convention.

//---------------------------
Middleware functions
-takes a req object, and returns a res or passes it onto another middleware function
*they are called in sequence top to bottom (app.use())

EG:
app.get
app.post
app.use(express.json()) // reads the json req and returns req.body

This procedure is known as the Request Processing Pipeline
i.e: Request --> json() --> route() --> Response    


How to create custom middleware function:
-----------------------------------------
-By convention, each middleware function has its own file instead of being coded in the main file. (module.exports =)
-3 parameters, (req, res, next)

app.use(function(req, res, next) {
    console.log('Logging');
    next();
})

next() is important as it passes control to the next middleware function in the Pipeline
without it, the req <-> res cycle fails to loop and it hangs;


Built-in Express middleware functions:
-express.json() // parses json object req bodies
-express.urlencoded({ extended: true }) // parses key=value object req bodies (used for eg in forms)
-express.static('folder') // Allows users to open files inside the folder from the browser
|
--> files opened by typing file name at the back of the url (or you can redirect them)


Commonly used Third-party Middleware(expressjs.com):
----------------------------------------------------
1.helmet() // secures app by setting various HTTP headers
2.morgan() // log HTTP requests in console

//--------------------------------------------------

Configuring environments such that some middleware only operate during specified stages of development

Environments:
-------------
process.env.NODE_ENV = production/staging/development

app.get('env') // returns development by default if not specified

if (app.get('env') === 'development'){
    app.use(morgan('tiny'))
}

Configurations:
---------------
default.json
development.json
production.json
custom-environment-variables.json

DO NOT STORE SECRET STUFF IN CONFIG, they are public and easily read

You can store passwords in environment variables

//---------------------------------------------------

DEBUGGING:
----------
npm i debug
replaces console.log so that you don't have to delete it everytime u test

How to use:
const startupDebugger = require('debug')('app:startup')         // 2nd argument is the name of the debugger
const otherDebugger = require('debug')('app:others')

startupDebugger('Logging') // Use it exactly like console.log
otherDebugger('Logging')

$env:DEBUG="app:startup"        // in console to set env var, this shows only the debug messages for startup
$env:DEBUG="app:startup","app:others" // Shows debug messages for both startup and others
